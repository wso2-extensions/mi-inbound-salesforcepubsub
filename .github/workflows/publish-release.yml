name: Publish Release
on:
  workflow_dispatch:
jobs:
  Ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          token: ${{ secrets.WSO2_INTEGRATION_BOT_TOKEN }}
          fetch-depth: 0
      - name: Set up JDK 11
        uses: joschi/setup-jdk@v2
        with:
          distribution: 'adopt'
          java-version: 11
      - name: Extract project version
        run: |
          VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml | sed 's/-SNAPSHOT$//')
          VERSION_TAG="v$VERSION"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Update meta.json with new release
        run: |
          # Create a temporary script to update meta.json
          cat > update_meta.py << 'EOF'
          import json
          import sys
          import os
          
          # Read the current meta.json
          with open('.connector-store/meta.json', 'r') as f:
              data = json.load(f)
          
          # Get the new version tag from the environment
          new_tag = os.environ['VERSION_TAG']
          
          # Check if this version already exists
          existing_tags = [release['tagName'] for release in data['releases']]
          if new_tag not in existing_tags:
              # Add new release to the beginning of the releases array
              new_release = {
                  "tagName": new_tag,
                  "products": ["MI 4.4.0"],
                  "operations": [],
                  "connections": [],
                  "isHidden": False
              }
              data['releases'].insert(0, new_release)
              
              # Write back to file
              with open('.connector-store/meta.json', 'w') as f:
                  json.dump(data, f, indent=2)
              
              print(f"Added new release {new_tag} to meta.json")
          else:
              print(f"Release {new_tag} already exists in meta.json")
          EOF
          
          # Run the Python script
          python3 update_meta.py
          
          # Verify the change
          echo "Updated meta.json content:"
          cat .connector-store/meta.json
      - name: Commit meta.json changes
        run: |
          git add .connector-store/meta.json
          git commit -m "Add release ${{ env.VERSION_TAG }} to meta.json" || echo "No changes to commit"
          git push origin main
      - name: Configure Maven settings file
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>nexus-releases</id>
                      <username>${{ secrets.NEXUS_USERNAME }}</username>
                      <password>${{ secrets.NEXUS_PASSWORD }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml
      - name: Configure git credentials
        run: |
          git config --global user.name ${{ secrets.WSO2_INTEGRATION_BOT_USERNAME }}
          git config --global user.email ${{ secrets.WSO2_INTEGRATION_BOT_EMAIL }}
      - name: Build artifacts
        run: |
          mvn clean install
      - name: Deploy artifacts with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.WSO2_INTEGRATION_BOT_TOKEN }}
        run: |
          mvn --batch-mode release:prepare release:perform -Dtag=${{ env.VERSION_TAG }} -Darguments="-Dmaven.javadoc.skip=true"
      - name: Create Github Release with Assets
        env:
          GITHUB_TOKEN: ${{ secrets.WSO2_INTEGRATION_BOT_TOKEN }}
        run: |
          find target/ -type f -name '*-SNAPSHOT.zip' -exec rm -f {} \;
          gh release create "${{ env.VERSION_TAG }}" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${{ env.VERSION_TAG }}" \
            --generate-notes \
            target/*.zip
            
